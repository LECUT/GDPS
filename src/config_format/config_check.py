import configparser

class conf_estimate():
    def __init__(self):
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        # default conf parameter
        self.conf_inp = dict(zip(['rinexo', 'rinexn'], ['', '']))
        self.conf_gen = dict(zip(['start_time', 'end_time', 'interval', 'satsys', 'gps_band', 'glo_band', 'gal_band', 'qzs_band', 'bds_band', 'irn_band', 'sbs_band'],
                                 ['', '', '', 'GRCEJIS', '1 2 5', '1 2 3', '1 5 7 8 6', '1 2 5 6', '2 7 6 1 5 8', '5 9 1', '1 5']))
        # self.conf_qc = dict(zip(['elmin', 'cnrmin', 'sateph', 'ionoopt', 'tropopt', 'pos_banpos', 'pos_option', 'pos_elcut', 'pos_cnrcut', 'pos_kin', 'mw_limit', 'gf_limit', 'int_pcs'],
        #                         ['0', '0', '1', '1', '1', '0 0 0 0 0 0 0', '0 0 0 0', '5', '0', '0',  '2.0', '0.10', '1']))
        self.conf_qc = dict(zip(['elmin', 'cnrmin', 'sateph', 'ionoopt', 'tropopt', 'pos_banpos', 'pos_option', 'pos_elcut', 'pos_cnrcut', 'pos_kin', 'int_pcs'],
                                ['0', '0', '1', '1', '1', '0 0 0 0 0 0 0', '0 0 0 0', '5', '0', '0', '1']))
        # create conf class
        self.conf = configparser.ConfigParser()
        self.conf.add_section('inp')
        self.conf.set('inp', '; Inputs Description', 'Tag')
        self.conf.add_section('gen')
        self.conf.set('gen', '; General Description', 'Tag')
        self.conf.add_section('qc')
        self.conf.set('qc', '; Quality Check Description', 'Tag')

        self.conf.set('inp', '; File Directory', 'Tag')
        self.conf.set('inp', 'rinexo', self.conf_inp['rinexo'])
        self.conf.set('inp', 'rinexn', self.conf_inp['rinexn'])

        self.conf.set('gen', '; Begin Time: start time (0:from obs 1:form opt)', 'Tag')
        self.conf.set('gen', 'start_time', self.conf_gen['start_time'])
        self.conf.set('gen', '; End Time: start time (0:from obs 1:form opt)', 'Tag')
        self.conf.set('gen', 'end_time', self.conf_gen['end_time'])
        self.conf.set('gen', '; t interval', 'Tag')
        self.conf.set('gen', 'interval', self.conf_gen['interval'])
        self.conf.set('gen', '; System: G or C or E (Space separated)', 'Tag')
        self.conf.set('gen', 'satsys', self.conf_gen['satsys'])
        self.conf.set('gen', '; GPS BAND: (Space separated)', 'Tag')
        self.conf.set('gen', 'gps_band', self.conf_gen['gps_band'])
        self.conf.set('gen', '; GLO BAND: (Space separated)', 'Tag')
        self.conf.set('gen', 'glo_band', self.conf_gen['glo_band'])
        self.conf.set('gen', '; GAL BAND: (Space separated)', 'Tag')
        self.conf.set('gen', 'gal_band', self.conf_gen['gal_band'])
        self.conf.set('gen', '; QZS BAND: (Space separated)', 'Tag')
        self.conf.set('gen', 'qzs_band', self.conf_gen['qzs_band'])
        self.conf.set('gen', '; BDS BAND: (Space separated)', 'Tag')
        self.conf.set('gen', 'bds_band', self.conf_gen['bds_band'])
        self.conf.set('gen', '; NavIC BAND: (Space separated)', 'Tag')
        self.conf.set('gen', 'irn_band', self.conf_gen['irn_band'])
        self.conf.set('gen', '; SBS BAND: (Space separated)', 'Tag')
        self.conf.set('gen', 'sbs_band', self.conf_gen['sbs_band'])

        self.conf.set('qc', '; user elevation cut-off(deg)', 'Tag')
        self.conf.set('qc', 'elmin', self.conf_qc['elmin'])
        self.conf.set('qc', '; carrier noise mask(dB-Hz)', 'Tag')
        self.conf.set('qc', 'cnrmin', self.conf_qc['cnrmin'])
        self.conf.set('qc', '; satellite ephemeris/clock (1:broadcast ephemeris, 2:precise ephemeris)', 'Tag')
        self.conf.set('qc', 'sateph', self.conf_qc['sateph'])
        self.conf.set('qc', '; ionosphere option (0:off, 1:broadcast)', 'Tag')
        self.conf.set('qc', 'ionoopt', self.conf_qc['ionoopt'])
        self.conf.set('qc', ';troposphere option (0:off, 1:broadcast)', 'Tag')
        self.conf.set('qc', 'tropopt', self.conf_qc['tropopt'])
        self.conf.set('qc', '; SPP ban position select [0:GPS; 1:GLO; 2:GAL; 3:QZS; 4:SBS; 5:BDS; 6:IRN] [0:L1/E1/B1 1:L2/E5b/B2(I/b) 2:L5/E5a/B2a 3:E6/L6/B3 4:E5/B2(a+b) 5:B1C]', 'Tag')
        self.conf.set('qc', 'pos_banpos', self.conf_qc['pos_banpos'])
        self.conf.set('qc', '; SPP correct [0:iono; 1:trop; 2:tide, 3:RAIM FDE](0:off; 1:on)', 'Tag')
        self.conf.set('qc', 'pos_option', self.conf_qc['pos_option'])
        self.conf.set('qc', '; positioning elevation angle cut-off (degrees)', 'Tag')
        self.conf.set('qc', 'pos_elcut', self.conf_qc['pos_elcut'])
        self.conf.set('qc', '; positioning carrier noise cut-off (dB-Hz)', 'Tag')
        self.conf.set('qc', 'pos_cnrcut', self.conf_qc['pos_cnrcut'])
        self.conf.set('qc', '; motion state of the receiver (0:static; 1:dynamic)', 'Tag')
        self.conf.set('qc', 'pos_kin', self.conf_qc['pos_kin'])
        # self.conf.set('qc', '; preedit, mw combination limitation [unit: cycle; 0 means not check mw]', 'Tag')
        # self.conf.set('qc', 'mw_limit', self.conf_qc['mw_limit'])
        # self.conf.set('qc', '; PreEdit, GF combination limitation [unit: meter; 0 Means not check gf]', 'Tag')
        # self.conf.set('qc', 'gf_limit', self.conf_qc['gf_limit'])
        self.conf.set('qc', '; PreEdit, interval for smalle epoch identification[unit: epoch; 0 Means not check short]', 'Tag')
        self.conf.set('qc', 'int_pcs', self.conf_qc['int_pcs'])